#!/usr/bin/env python3

# Â© Thomas Schmeiduch <https://github.com/schtho>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import sys
import requests
import base64
import getopt

VERSION = '1.0'
OPT_MERAKI_APIKEY = None
OPT_MERAKI_ORG = None
OPT_MERAKI_NETWORK = None

def meraki(organization_id, network_id, api_key):

    url = f"https://api.meraki.com/api/v1/organizations/{organization_id}/devices/statuses?networkIds[]={network_id}"

    payload = None

    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-Cisco-Meraki-API-Key": api_key
    }

    response = requests.request('GET', url, headers=headers, data=payload)
    json = response.json()

    for i in json:
        details = "null"
        if "productType" in i and i["productType"] == "switch":
            # lol
            serial = i["serial"]
            url = f"https://api.meraki.com/api/v1/devices/{serial}/switch/ports/statuses"
            response = requests.request('GET', url, headers=headers, data = payload)
            # json_sw_ports = response.json()
            json_sw_ports = response.text

            meraki_sw_dict_bytes = json_sw_ports.encode('ascii')
            base64_bytes = base64.b64encode(meraki_sw_dict_bytes)
            base64_message = base64_bytes.decode('ascii')

            details = base64_message

        sys.stdout.write("%s %s %s %s %s %s %s\n" % (
            str(i["name"]).replace(" ", ""),
            i["status"],
            i["productType"],
            i["model"],
            i["serial"],
            (i["lanIp"] if "lanIp" in i else "None"),
            details
        ))

def usage():
    sys.stderr.write("""Checkmk Cisco Meraki Agent
USAGE: agent_meraki -o ORGANIZATION-ID -k API-KEY -n NETWORK-ID
       agent_meraki -h
OPTIONS:
  -h, --help                                Show this help message and exit
  -o, --organization                        Organization ID inside Meraki Cloud
  -k, --key                                 Cloud API-Key
  -n, --network                             Network ID inside Meraki Cloud
""")

def cli_args():
    opt_key = None
    opt_org = None
    opt_net = None

    short_options = "hk:o:n:"
    long_options = ["help", "key=", "organization=", "network="]

    try:
        opts, args = getopt.getopt(sys.argv[1:], short_options, long_options)
    except getopt.GetoptError as err:
        sys.stderr.write("%s\n" % err)
        sys.exit(1)

    for opt, arg in opts:
        if opt in ['-h', '--help']:
            usage()
            sys.exit(0)
        elif opt in ["-k", "--key"]:
            opt_key = arg
        elif opt in ["-o", "--organization"]:
            opt_org = arg
        elif opt in ["-n", "--network"]:
            opt_net = arg
        elif not opt:
            usage()
            sys.exit(0)

    if not opt_org:
        sys.stderr.write("ERROR: No organization defined.\n")
        sys.exit(1)
    elif not opt_key:
        sys.stderr.write("ERROR: No key given.\n")
        sys.exit(1)
    elif not opt_net:
        sys.stderr.write("ERROR: No network defined.\n")
        sys.exit(1)

    return opt_org, opt_key, opt_net


# MAIN FUNCTION

org, key, net = cli_args()
OPT_MERAKI_APIKEY = key
OPT_MERAKI_NETWORK = net
OPT_MERAKI_ORG = org

sys.stdout.write('<<<check_mk>>>\n')
sys.stdout.write('Version: %s\n' % VERSION)
sys.stdout.write('AgentOS: meraki\n')
sys.stdout.write('{"cmk/device_type": "network"\n')

sys.stdout.write('<<<meraki>>>\n')

meraki(OPT_MERAKI_ORG, OPT_MERAKI_NETWORK, OPT_MERAKI_APIKEY)
