#!/usr/bin/env python3

# Â© Thomas Schmeiduch <https://github.com/schtho>

# This is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

import sys
import requests
import base64
import getopt

VERSION = '1.0'
OPT_MERAKI_APIKEY = None
OPT_MERAKI_ORG = None
OPT_MERAKI_TAGS = None
OPT_MERAKI_TAG_TYPE = None

def meraki(organization_id, api_key, network_tags, tag_filter_any):

    payload = None

    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "X-Cisco-Meraki-API-Key": api_key
    }

    # Get all Meraki Networks (optional by tags)
#    url = f"https://api.meraki.com/api/v1/organizations/{organization_id}/networks?tags[]=paedagogik&tags[]=verwaltung&tagsFilterType=withAnyTags"
    url = f"https://api.meraki.com/api/v1/organizations/{organization_id}/networks"
    if len(network_tags) != 0:
        if tag_filter_any:
            url += "?tagsFilterType=withAnyTags"
        else:
            url += "?tagsFilterType=withAllTags"
        for t in network_tags:
            url += f"&tags[]={t}"

    response = requests.request('GET', url, headers=headers, data = payload)

    if response.status_code == 429:
        raise Exception("API rate limit exceeded")

    meraki_net_list = response.json()

    # for each given Meraki network
    for meraki_net in meraki_net_list:
        net_id = meraki_net["id"]
        net_name = meraki_net["name"]

        # Get all devices of given Meraki network
        meraki_net_devices = None
        for z in range(0,2):
            try:
                meraki_net_devices = get_meraki_devices_by_net_dict(payload, headers, organization_id, net_id)
                break
            except Exception:
                continue
        if meraki_net_devices is None:
            print(net_name + " error\n")
            continue

        # Piggyback CMK Host
        cmk_host = f"<<<<Meraki-{net_name}>>>>\n"
        sys.stdout.write(cmk_host)
        # Service Beginning
        sys.stdout.write('<<<meraki>>>\n')

        for i in meraki_net_devices:
            details = "null"
            if "productType" in i and i["productType"] == "switch":
                serial = i["serial"]
                # retry 2 times if exception thrown
                for z in range(0,2):
                    try:
                        details = get_meraki_sw_details_encoded(payload, headers, serial)
                        break
                    except Exception:
                        continue

            sys.stdout.write("%s %s %s %s %s %s %s\n" % (
                str(i["name"]).replace(" ", ""),
                i["status"],
                i["productType"],
                i["model"],
                i["serial"],
                (i["lanIp"] if "lanIp" in i else "None"),
                details
            ))
#            break


def get_meraki_devices_by_net_dict(payload, headers, organization_id, net_id):
    url = f"https://api.meraki.com/api/v1/organizations/{organization_id}/devices/statuses?networkIds[]={net_id}"
    response = requests.request('GET', url, headers=headers, data=payload)

    if response.status_code == 429:
        raise Exception("API rate limit exceeded")
    return response.json()


def get_meraki_sw_details_encoded(payload, headers, serial):
    url = f"https://api.meraki.com/api/v1/devices/{serial}/switch/ports/statuses"
    response = requests.request('GET', url, headers=headers, data = payload)
    # json_sw_ports = response.json()
    json_sw_ports = response.text

    meraki_sw_dict_bytes = json_sw_ports.encode('ascii')
    base64_bytes = base64.b64encode(meraki_sw_dict_bytes)
    base64_message = base64_bytes.decode('ascii')
    return base64_message


def usage():
    sys.stderr.write("""Checkmk Cisco Meraki Agent
USAGE: agent_meraki -o ORGANIZATION-ID -k API-KEY -n NETWORK-ID
       agent_meraki -h
OPTIONS:
  -h, --help                                Show this help message and exit
  -o, --organization                        Organization ID inside Meraki Cloud
  -k, --key                                 Cloud API-Key
  -t, --tags                                Meraki Network Tags Filter
  -tt, --tagtype                            True if any of given --tags (filter), otherwise if all given tags
""")

def cli_args():
    opt_key = None
    opt_org = None
    opt_tags = None
    opt_tag_type = None

    short_options = "hk:o:t:tt:"
    long_options = ["help", "key=", "organization=", "tags=", "tagtype="]

    try:
        opts, args = getopt.getopt(sys.argv[1:], short_options, long_options)
    except getopt.GetoptError as err:
        sys.stderr.write("%s\n" % err)
        sys.exit(1)

    for opt, arg in opts:
        if opt in ['-h', '--help']:
            usage()
            sys.exit(0)
        elif opt in ["-k", "--key"]:
            opt_key = arg
        elif opt in ["-o", "--organization"]:
            opt_org = arg
        elif opt in ["-t", "--tags"]:
            opt_tags = arg
        elif opt in ["-tt", "--tagtype"]:
            opt_tag_type = arg
        elif not opt:
            usage()
            sys.exit(0)

    if not opt_org:
        sys.stderr.write("ERROR: No organization defined.\n")
        sys.exit(1)
    elif not opt_key:
        sys.stderr.write("ERROR: No key given.\n")
        sys.exit(1)

    return opt_org, opt_key, opt_tags, opt_tag_type


# MAIN FUNCTION

org, key, tags, tag_type = cli_args()
OPT_MERAKI_APIKEY = key
OPT_MERAKI_ORG = org
OPT_MERAKI_TAGS = tags
OPT_MERAKI_TAG_TYPE = tag_type

sys.stdout.write('<<<check_mk>>>\n')
sys.stdout.write('Version: %s\n' % VERSION)
sys.stdout.write('AgentOS: meraki\n')

sys.stdout.write('<<<labels>>>\n')
sys.stdout.write('{"cmk/device":"meraki"}\n')

tag_list = OPT_MERAKI_TAGS.split(",")
meraki(OPT_MERAKI_ORG, OPT_MERAKI_APIKEY, tag_list, OPT_MERAKI_TAG_TYPE)
